{"version":3,"file":"universal-router.js","sources":["../node_modules/path-to-regexp/index.js","src/matchPath.js","src/matchRoute.js","src/resolveRoute.js","src/UniversalRouter.js"],"sourcesContent":["/**\n * Expose `pathToRegexp`.\n */\nmodule.exports = pathToRegexp\nmodule.exports.parse = parse\nmodule.exports.compile = compile\nmodule.exports.tokensToFunction = tokensToFunction\nmodule.exports.tokensToRegExp = tokensToRegExp\n\n/**\n * Default configs.\n */\nvar DEFAULT_DELIMITER = '/'\nvar DEFAULT_DELIMITERS = './'\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\"]\n  // \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined]\n  '(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?'\n].join('|'), 'g')\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = []\n  var key = 0\n  var index = 0\n  var path = ''\n  var defaultDelimiter = (options && options.delimiter) || DEFAULT_DELIMITER\n  var delimiters = (options && options.delimiters) || DEFAULT_DELIMITERS\n  var pathEscaped = false\n  var res\n\n  while ((res = PATH_REGEXP.exec(str)) !== null) {\n    var m = res[0]\n    var escaped = res[1]\n    var offset = res.index\n    path += str.slice(index, offset)\n    index = offset + m.length\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1]\n      pathEscaped = true\n      continue\n    }\n\n    var prev = ''\n    var next = str[index]\n    var name = res[2]\n    var capture = res[3]\n    var group = res[4]\n    var modifier = res[5]\n\n    if (!pathEscaped && path.length) {\n      var k = path.length - 1\n\n      if (delimiters.indexOf(path[k]) > -1) {\n        prev = path[k]\n        path = path.slice(0, k)\n      }\n    }\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path)\n      path = ''\n      pathEscaped = false\n    }\n\n    var partial = prev !== '' && next !== undefined && next !== prev\n    var repeat = modifier === '+' || modifier === '*'\n    var optional = modifier === '?' || modifier === '*'\n    var delimiter = prev || defaultDelimiter\n    var pattern = capture || group\n\n    tokens.push({\n      name: name || key++,\n      prefix: prev,\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      pattern: pattern ? escapeGroup(pattern) : '[^' + escapeString(delimiter) + ']+?'\n    })\n  }\n\n  // Push any remaining characters.\n  if (path || index < str.length) {\n    tokens.push(path + str.substr(index))\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options))\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length)\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$')\n    }\n  }\n\n  return function (data, options) {\n    var path = ''\n    var encode = (options && options.encode) || encodeURIComponent\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i]\n\n      if (typeof token === 'string') {\n        path += token\n        continue\n      }\n\n      var value = data ? data[token.name] : undefined\n      var segment\n\n      if (Array.isArray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but got array')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) continue\n\n          throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j])\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\"')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment\n        }\n\n        continue\n      }\n\n      if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n        segment = encode(String(value))\n\n        if (!matches[i].test(segment)) {\n          throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but got \"' + segment + '\"')\n        }\n\n        path += token.prefix + segment\n        continue\n      }\n\n      if (token.optional) {\n        // Prepend partial segment prefixes.\n        if (token.partial) path += token.prefix\n\n        continue\n      }\n\n      throw new TypeError('Expected \"' + token.name + '\" to be ' + (token.repeat ? 'an array' : 'a string'))\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$/()])/g, '\\\\$1')\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options && options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {Array=}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  if (!keys) return path\n\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g)\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        pattern: null\n      })\n    }\n  }\n\n  return path\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = []\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source)\n  }\n\n  return new RegExp('(?:' + parts.join('|') + ')', flags(options))\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}  tokens\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  options = options || {}\n\n  var strict = options.strict\n  var end = options.end !== false\n  var delimiter = escapeString(options.delimiter || DEFAULT_DELIMITER)\n  var delimiters = options.delimiters || DEFAULT_DELIMITERS\n  var endsWith = [].concat(options.endsWith || []).map(escapeString).concat('$').join('|')\n  var route = ''\n  var isEndDelimited = false\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n\n    if (typeof token === 'string') {\n      route += escapeString(token)\n      isEndDelimited = i === tokens.length - 1 && delimiters.indexOf(token[token.length - 1]) > -1\n    } else {\n      var prefix = escapeString(token.prefix)\n      var capture = token.repeat\n        ? '(?:' + token.pattern + ')(?:' + prefix + '(?:' + token.pattern + '))*'\n        : token.pattern\n\n      if (keys) keys.push(token)\n\n      if (token.optional) {\n        if (token.partial) {\n          route += prefix + '(' + capture + ')?'\n        } else {\n          route += '(?:' + prefix + '(' + capture + '))?'\n        }\n      } else {\n        route += prefix + '(' + capture + ')'\n      }\n    }\n  }\n\n  if (end) {\n    if (!strict) route += '(?:' + delimiter + ')?'\n\n    route += endsWith === '$' ? '$' : '(?=' + endsWith + ')'\n  } else {\n    if (!strict) route += '(?:' + delimiter + '(?=' + endsWith + '))?'\n    if (!isEndDelimited) route += '(?=' + delimiter + '|' + endsWith + ')'\n  }\n\n  return new RegExp('^' + route, flags(options))\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {Array=}                keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, keys)\n  }\n\n  if (Array.isArray(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), keys, options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), keys, options)\n}\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright (c) 2015-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport pathToRegexp from 'path-to-regexp'\n\nconst { hasOwnProperty } = Object.prototype\nconst cache = new Map()\n\nfunction decodeParam(val) {\n  try {\n    return decodeURIComponent(val)\n  } catch (err) {\n    return val\n  }\n}\n\nfunction matchPath(route, pathname, parentKeys, parentParams) {\n  const end = !route.children\n  const cacheKey = `${route.path || ''}|${end}`\n  let regexp = cache.get(cacheKey)\n\n  if (!regexp) {\n    const keys = []\n    regexp = {\n      keys,\n      pattern: pathToRegexp(route.path || '', keys, { end }),\n    }\n    cache.set(cacheKey, regexp)\n  }\n\n  const m = regexp.pattern.exec(pathname)\n  if (!m) {\n    return null\n  }\n\n  const path = m[0]\n  const params = Object.assign({}, parentParams)\n\n  for (let i = 1; i < m.length; i++) {\n    const key = regexp.keys[i - 1]\n    const prop = key.name\n    const value = m[i]\n    if (value !== undefined || !hasOwnProperty.call(params, prop)) {\n      if (key.repeat) {\n        params[prop] = value ? value.split(key.delimiter).map(decodeParam) : []\n      } else {\n        params[prop] = value ? decodeParam(value) : value\n      }\n    }\n  }\n\n  return {\n    path: !end && path.charAt(path.length - 1) === '/' ? path.substr(1) : path,\n    keys: parentKeys.concat(regexp.keys),\n    params,\n  }\n}\n\nexport default matchPath\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright (c) 2015-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport matchPath from './matchPath'\n\nfunction matchRoute(route, baseUrl, pathname, parentKeys, parentParams) {\n  let match\n  let childMatches\n  let childIndex = 0\n\n  return {\n    next(routeToSkip) {\n      if (route === routeToSkip) {\n        return { done: true }\n      }\n\n      if (!match) {\n        match = matchPath(route, pathname, parentKeys, parentParams)\n\n        if (match) {\n          return {\n            done: false,\n            value: {\n              route,\n              baseUrl,\n              path: match.path,\n              keys: match.keys,\n              params: match.params,\n            },\n          }\n        }\n      }\n\n      if (match && route.children) {\n        while (childIndex < route.children.length) {\n          if (!childMatches) {\n            const childRoute = route.children[childIndex]\n            childRoute.parent = route\n\n            childMatches = matchRoute(\n              childRoute,\n              baseUrl + match.path,\n              pathname.substr(match.path.length),\n              match.keys,\n              match.params,\n            )\n          }\n\n          const childMatch = childMatches.next(routeToSkip)\n          if (!childMatch.done) {\n            return {\n              done: false,\n              value: childMatch.value,\n            }\n          }\n\n          childMatches = null\n          childIndex++\n        }\n      }\n\n      return { done: true }\n    },\n  }\n}\n\nexport default matchRoute\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright (c) 2015-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nfunction resolveRoute(context, params) {\n  if (typeof context.route.action === 'function') {\n    return context.route.action(context, params)\n  }\n  return undefined\n}\n\nexport default resolveRoute\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright (c) 2015-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport pathToRegexp from 'path-to-regexp'\nimport matchRoute from './matchRoute'\nimport resolveRoute from './resolveRoute'\n\nfunction isChildRoute(parentRoute, childRoute) {\n  let route = childRoute\n  while (route) {\n    route = route.parent\n    if (route === parentRoute) {\n      return true\n    }\n  }\n  return false\n}\n\nclass UniversalRouter {\n  constructor(routes, options = {}) {\n    if (Object(routes) !== routes) {\n      throw new TypeError('Invalid routes')\n    }\n\n    this.baseUrl = options.baseUrl || ''\n    this.errorHandler = options.errorHandler\n    this.resolveRoute = options.resolveRoute || resolveRoute\n    this.context = Object.assign({ router: this }, options.context)\n    this.root = Array.isArray(routes) ? { path: '', children: routes, parent: null } : routes\n    this.root.parent = null\n  }\n\n  resolve(pathnameOrContext) {\n    const context = Object.assign(\n      {},\n      this.context,\n      typeof pathnameOrContext === 'string' ? { pathname: pathnameOrContext } : pathnameOrContext,\n    )\n    const match = matchRoute(\n      this.root,\n      this.baseUrl,\n      context.pathname.substr(this.baseUrl.length),\n      [],\n      null,\n    )\n    const resolve = this.resolveRoute\n    let matches = null\n    let nextMatches = null\n    let currentContext = context\n\n    function next(resume, parent = matches.value.route, prevResult) {\n      const routeToSkip = prevResult === null && matches.value.route\n      matches = nextMatches || match.next(routeToSkip)\n      nextMatches = null\n\n      if (!resume) {\n        if (matches.done || !isChildRoute(parent, matches.value.route)) {\n          nextMatches = matches\n          return Promise.resolve(null)\n        }\n      }\n\n      if (matches.done) {\n        const error = new Error('Page not found')\n        error.context = context\n        error.code = 404\n        return Promise.reject(error)\n      }\n\n      currentContext = Object.assign({}, context, matches.value)\n\n      return Promise.resolve(resolve(currentContext, matches.value.params)).then((result) => {\n        if (result !== null && result !== undefined) {\n          return result\n        }\n        return next(resume, parent, result)\n      })\n    }\n\n    context.next = next\n\n    return Promise.resolve()\n      .then(() => next(true, this.root))\n      .catch((error) => {\n        error.context = error.context || currentContext\n        error.code = error.code || 500\n        if (this.errorHandler) {\n          return this.errorHandler(error)\n        }\n        throw error\n      })\n  }\n}\n\nUniversalRouter.pathToRegexp = pathToRegexp\n\nexport default UniversalRouter\n"],"names":["pathToRegexp","parse","compile","tokensToFunction","tokensToRegExp","DEFAULT_DELIMITER","DEFAULT_DELIMITERS","PATH_REGEXP","RegExp","join","str","options","tokens","key","index","path","defaultDelimiter","delimiter","delimiters","pathEscaped","res","exec","m","escaped","offset","slice","length","prev","next","name","capture","group","modifier","k","indexOf","push","partial","undefined","repeat","optional","pattern","escapeGroup","escapeString","substr","matches","Array","i","data","encode","encodeURIComponent","token","value","segment","isArray","TypeError","j","test","prefix","String","replace","flags","sensitive","regexpToRegexp","keys","groups","source","match","arrayToRegexp","parts","stringToRegexp","strict","end","endsWith","concat","map","route","isEndDelimited","hasOwnProperty","Object","prototype","cache","Map","decodeParam","val","decodeURIComponent","err","matchPath","pathname","parentKeys","parentParams","children","cacheKey","regexp","get","set","params","assign","prop","call","split","charAt","matchRoute","baseUrl","childMatches","childIndex","routeToSkip","childRoute","parent","childMatch","done","resolveRoute","context","action","isChildRoute","parentRoute","UniversalRouter","routes","errorHandler","root","resolve","pathnameOrContext","nextMatches","currentContext","resume","prevResult","Promise","error","Error","code","reject","then","result","catch"],"mappings":"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"}