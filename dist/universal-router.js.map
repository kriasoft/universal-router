{"version":3,"file":"universal-router.js","sources":["../node_modules/path-to-regexp/index.js","src/matchPath.js","src/matchRoute.js","src/resolveRoute.js","src/UniversalRouter.js"],"sourcesContent":["/**\n * Expose `pathToRegexp`.\n */\nmodule.exports = pathToRegexp\nmodule.exports.parse = parse\nmodule.exports.compile = compile\nmodule.exports.tokensToFunction = tokensToFunction\nmodule.exports.tokensToRegExp = tokensToRegExp\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\"]\n  // \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined]\n  '(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?'\n].join('|'), 'g')\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = []\n  var key = 0\n  var index = 0\n  var path = ''\n  var defaultDelimiter = (options && options.delimiter) || '/'\n  var delimiters = (options && options.delimiters) || './'\n  var pathEscaped = false\n  var res\n\n  while ((res = PATH_REGEXP.exec(str)) !== null) {\n    var m = res[0]\n    var escaped = res[1]\n    var offset = res.index\n    path += str.slice(index, offset)\n    index = offset + m.length\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1]\n      pathEscaped = true\n      continue\n    }\n\n    var prev = ''\n    var next = str[index]\n    var name = res[2]\n    var capture = res[3]\n    var group = res[4]\n    var modifier = res[5]\n\n    if (!pathEscaped && path.length) {\n      var k = path.length - 1\n\n      if (delimiters.indexOf(path[k]) > -1) {\n        prev = path[k]\n        path = path.slice(0, k)\n      }\n    }\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path)\n      path = ''\n      pathEscaped = false\n    }\n\n    var partial = prev !== '' && next !== undefined && next !== prev\n    var repeat = modifier === '+' || modifier === '*'\n    var optional = modifier === '?' || modifier === '*'\n    var delimiter = prev || defaultDelimiter\n    var pattern = capture || group\n\n    tokens.push({\n      name: name || key++,\n      prefix: prev,\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      pattern: pattern ? escapeGroup(pattern) : '[^' + escapeString(delimiter) + ']+?'\n    })\n  }\n\n  // Push any remaining characters.\n  if (path || index < str.length) {\n    tokens.push(path + str.substr(index))\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options))\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length)\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$')\n    }\n  }\n\n  return function (data, options) {\n    var path = ''\n    var encode = (options && options.encode) || encodeURIComponent\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i]\n\n      if (typeof token === 'string') {\n        path += token\n        continue\n      }\n\n      var value = data ? data[token.name] : undefined\n      var segment\n\n      if (Array.isArray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but got array')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) continue\n\n          throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j])\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\"')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment\n        }\n\n        continue\n      }\n\n      if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n        segment = encode(String(value))\n\n        if (!matches[i].test(segment)) {\n          throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but got \"' + segment + '\"')\n        }\n\n        path += token.prefix + segment\n        continue\n      }\n\n      if (token.optional) {\n        // Prepend partial segment prefixes.\n        if (token.partial) path += token.prefix\n\n        continue\n      }\n\n      throw new TypeError('Expected \"' + token.name + '\" to be ' + (token.repeat ? 'an array' : 'a string'))\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$/()])/g, '\\\\$1')\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options && options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {Array=}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  if (!keys) return path\n\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g)\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        pattern: null\n      })\n    }\n  }\n\n  return path\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = []\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source)\n  }\n\n  return new RegExp('(?:' + parts.join('|') + ')', flags(options))\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}  tokens\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  options = options || {}\n\n  var strict = options.strict\n  var end = options.end !== false\n  var delimiter = escapeString(options.delimiter || '/')\n  var endsWith = [].concat(options.endsWith || []).map(escapeString).concat('$').join('|')\n  var route = ''\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n\n    if (typeof token === 'string') {\n      route += escapeString(token)\n    } else {\n      var prefix = escapeString(token.prefix)\n      var capture = '(?:' + token.pattern + ')'\n\n      if (keys) keys.push(token)\n\n      if (token.repeat) {\n        capture += '(?:' + prefix + capture + ')*'\n      }\n\n      if (token.optional) {\n        if (!token.partial) {\n          capture = '(?:' + prefix + '(' + capture + '))?'\n        } else {\n          capture = prefix + '(' + capture + ')?'\n        }\n      } else {\n        capture = prefix + '(' + capture + ')'\n      }\n\n      route += capture\n    }\n  }\n\n  // In non-strict mode we allow a delimiter at the end of a match.\n  if (!strict) {\n    route += '(?:' + delimiter + '(?=' + endsWith + '))?'\n  }\n\n  if (end) {\n    route += endsWith === '$' ? endsWith : '(?=' + endsWith + ')'\n  } else {\n    // In non-ending mode, we need the capturing groups to match as much as\n    // possible by using a positive lookahead to the end or next path segment.\n    route += '(?=' + delimiter + '|' + endsWith + ')'\n  }\n\n  return new RegExp('^' + route, flags(options))\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {Array=}                keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, keys)\n  }\n\n  if (Array.isArray(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), keys, options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), keys, options)\n}\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright © 2015-present Kriasoft, LLC. All rights reserved.\n *\n * This source code is licensed under the Apache 2.0 license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport pathToRegexp from 'path-to-regexp';\n\nconst cache = new Map();\n\nfunction decodeParam(val) {\n  try {\n    return decodeURIComponent(val);\n  } catch (err) {\n    return val;\n  }\n}\n\nfunction parseParam(key, value) {\n  if (key.repeat) {\n    return value ? value.split(key.delimiter).map(decodeParam) : [];\n  }\n  return value ? decodeParam(value) : value;\n}\n\nfunction matchPath(route, path, parentKeys, parentParams) {\n  const key = `${route.path || ''}|${!route.children}`;\n  let regexp = cache.get(key);\n\n  if (!regexp) {\n    const keys = [];\n    regexp = {\n      keys,\n      pattern: pathToRegexp(route.path || '', keys, { end: !route.children }),\n    };\n    cache.set(key, regexp);\n  }\n\n  const m = regexp.pattern.exec(path);\n  if (!m) {\n    return null;\n  }\n\n  const params = Object.assign({}, parentParams);\n\n  for (let i = 1; i < m.length; i += 1) {\n    params[regexp.keys[i - 1].name] = parseParam(regexp.keys[i - 1], m[i]);\n  }\n\n  return {\n    path: m[0],\n    keys: regexp.keys.concat(parentKeys),\n    params,\n  };\n}\n\nexport default matchPath;\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright © 2015-present Kriasoft, LLC. All rights reserved.\n *\n * This source code is licensed under the Apache 2.0 license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport matchPath from './matchPath';\n\nfunction matchRoute(route, baseUrl, path, parentKeys, parentParams) {\n  let match;\n  let childMatches;\n  let childIndex = 0;\n\n  return {\n    next() {\n      if (!match) {\n        match = matchPath(route, path, parentKeys, parentParams);\n\n        if (match) {\n          return {\n            done: false,\n            value: {\n              route,\n              baseUrl,\n              path: match.path,\n              keys: match.keys,\n              params: match.params,\n            },\n          };\n        }\n      }\n\n      if (match && route.children) {\n        while (childIndex < route.children.length) {\n          if (!childMatches) {\n            const childRoute = route.children[childIndex];\n            childRoute.parent = route;\n\n            childMatches = matchRoute(\n              childRoute,\n              baseUrl + match.path,\n              path.substr(match.path.length),\n              match.keys,\n              match.params,\n            );\n          }\n\n          const childMatch = childMatches.next();\n          if (!childMatch.done) {\n            return {\n              done: false,\n              value: childMatch.value,\n            };\n          }\n\n          childMatches = null;\n          childIndex += 1;\n        }\n      }\n\n      return { done: true };\n    },\n  };\n}\n\nexport default matchRoute;\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright © 2015-present Kriasoft, LLC. All rights reserved.\n *\n * This source code is licensed under the Apache 2.0 license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nfunction resolveRoute(context, params) {\n  if (typeof context.route.action === 'function') {\n    return context.route.action(context, params);\n  }\n\n  return null;\n}\n\nexport default resolveRoute;\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright © 2015-present Kriasoft, LLC. All rights reserved.\n *\n * This source code is licensed under the Apache 2.0 license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport pathToRegexp from 'path-to-regexp';\nimport matchPath from './matchPath';\nimport matchRoute from './matchRoute';\nimport resolveRoute from './resolveRoute';\n\nfunction isChildRoute(parentRoute, childRoute) {\n  let route = childRoute;\n  while (route) {\n    route = route.parent;\n    if (route === parentRoute) {\n      return true;\n    }\n  }\n  return false;\n}\n\nclass UniversalRouter {\n  constructor(routes, options = {}) {\n    if (Object(routes) !== routes) {\n      throw new TypeError('Invalid routes');\n    }\n\n    this.baseUrl = options.baseUrl || '';\n    this.resolveRoute = options.resolveRoute || resolveRoute;\n    this.context = Object.assign({ router: this }, options.context);\n    this.root = Array.isArray(routes) ? { path: '', children: routes, parent: null } : routes;\n    this.root.parent = null;\n  }\n\n  resolve(pathnameOrContext) {\n    const context = Object.assign(\n      {},\n      this.context,\n      typeof pathnameOrContext === 'string' ? { pathname: pathnameOrContext } : pathnameOrContext,\n    );\n    const match = matchRoute(\n      this.root,\n      this.baseUrl,\n      context.pathname.substr(this.baseUrl.length),\n      [],\n      null,\n    );\n    const resolve = this.resolveRoute;\n    let matches = null;\n    let nextMatches = null;\n\n    function next(resume, parent = matches.value.route) {\n      matches = nextMatches || match.next();\n      nextMatches = null;\n\n      if (!resume) {\n        if (matches.done || !isChildRoute(parent, matches.value.route)) {\n          nextMatches = matches;\n          return Promise.resolve(null);\n        }\n      }\n\n      if (matches.done) {\n        return Promise.reject(Object.assign(\n          new Error('Page not found'),\n          { context, status: 404, statusCode: 404 },\n        ));\n      }\n\n      return Promise.resolve(resolve(\n        Object.assign({}, context, matches.value),\n        matches.value.params,\n      )).then((result) => {\n        if (result !== null && result !== undefined) {\n          return result;\n        }\n\n        return next(resume, parent);\n      });\n    }\n\n    context.next = next;\n\n    return next(true, this.root);\n  }\n}\n\nUniversalRouter.pathToRegexp = pathToRegexp;\nUniversalRouter.matchPath = matchPath;\nUniversalRouter.matchRoute = matchRoute;\nUniversalRouter.resolveRoute = resolveRoute;\n\nexport default UniversalRouter;\n"],"names":["cache","Map","decodeParam","val","decodeURIComponent","err","parseParam","key","value","repeat","split","delimiter","map","matchPath","route","path","parentKeys","parentParams","children","regexp","get","keys","pathToRegexp","end","set","m","pattern","exec","params","Object","assign","i","length","name","concat","matchRoute","baseUrl","match","childMatches","childIndex","childRoute","parent","substr","childMatch","next","done","resolveRoute","context","action","isChildRoute","parentRoute","UniversalRouter","routes","options","TypeError","router","root","Array","isArray","pathnameOrContext","pathname","resolve","matches","nextMatches","resume","Promise","reject","Error","status","statusCode","then","result","undefined"],"mappings":"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"}