{"version":3,"file":"universal-router.min.js","sources":["../node_modules/path-to-regexp/index.js","src/matchPath.js","src/matchRoute.js","src/resolveRoute.js","src/UniversalRouter.js"],"sourcesContent":["/**\n * Expose `pathToRegexp`.\n */\nmodule.exports = pathToRegexp\nmodule.exports.parse = parse\nmodule.exports.compile = compile\nmodule.exports.tokensToFunction = tokensToFunction\nmodule.exports.tokensToRegExp = tokensToRegExp\n\n/**\n * Default configs.\n */\nvar DEFAULT_DELIMITER = '/'\nvar DEFAULT_DELIMITERS = './'\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\"]\n  // \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined]\n  '(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?'\n].join('|'), 'g')\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = []\n  var key = 0\n  var index = 0\n  var path = ''\n  var defaultDelimiter = (options && options.delimiter) || DEFAULT_DELIMITER\n  var delimiters = (options && options.delimiters) || DEFAULT_DELIMITERS\n  var pathEscaped = false\n  var res\n\n  while ((res = PATH_REGEXP.exec(str)) !== null) {\n    var m = res[0]\n    var escaped = res[1]\n    var offset = res.index\n    path += str.slice(index, offset)\n    index = offset + m.length\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1]\n      pathEscaped = true\n      continue\n    }\n\n    var prev = ''\n    var next = str[index]\n    var name = res[2]\n    var capture = res[3]\n    var group = res[4]\n    var modifier = res[5]\n\n    if (!pathEscaped && path.length) {\n      var k = path.length - 1\n\n      if (delimiters.indexOf(path[k]) > -1) {\n        prev = path[k]\n        path = path.slice(0, k)\n      }\n    }\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path)\n      path = ''\n      pathEscaped = false\n    }\n\n    var partial = prev !== '' && next !== undefined && next !== prev\n    var repeat = modifier === '+' || modifier === '*'\n    var optional = modifier === '?' || modifier === '*'\n    var delimiter = prev || defaultDelimiter\n    var pattern = capture || group\n\n    tokens.push({\n      name: name || key++,\n      prefix: prev,\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      pattern: pattern ? escapeGroup(pattern) : '[^' + escapeString(delimiter) + ']+?'\n    })\n  }\n\n  // Push any remaining characters.\n  if (path || index < str.length) {\n    tokens.push(path + str.substr(index))\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options))\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length)\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$')\n    }\n  }\n\n  return function (data, options) {\n    var path = ''\n    var encode = (options && options.encode) || encodeURIComponent\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i]\n\n      if (typeof token === 'string') {\n        path += token\n        continue\n      }\n\n      var value = data ? data[token.name] : undefined\n      var segment\n\n      if (Array.isArray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but got array')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) continue\n\n          throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j])\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\"')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment\n        }\n\n        continue\n      }\n\n      if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n        segment = encode(String(value))\n\n        if (!matches[i].test(segment)) {\n          throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but got \"' + segment + '\"')\n        }\n\n        path += token.prefix + segment\n        continue\n      }\n\n      if (token.optional) {\n        // Prepend partial segment prefixes.\n        if (token.partial) path += token.prefix\n\n        continue\n      }\n\n      throw new TypeError('Expected \"' + token.name + '\" to be ' + (token.repeat ? 'an array' : 'a string'))\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$/()])/g, '\\\\$1')\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options && options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {Array=}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  if (!keys) return path\n\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g)\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        pattern: null\n      })\n    }\n  }\n\n  return path\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = []\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source)\n  }\n\n  return new RegExp('(?:' + parts.join('|') + ')', flags(options))\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}  tokens\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  options = options || {}\n\n  var strict = options.strict\n  var end = options.end !== false\n  var delimiter = escapeString(options.delimiter || DEFAULT_DELIMITER)\n  var delimiters = options.delimiters || DEFAULT_DELIMITERS\n  var endsWith = [].concat(options.endsWith || []).map(escapeString).concat('$').join('|')\n  var route = ''\n  var isEndDelimited = false\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n\n    if (typeof token === 'string') {\n      route += escapeString(token)\n      isEndDelimited = i === tokens.length - 1 && delimiters.indexOf(token[token.length - 1]) > -1\n    } else {\n      var prefix = escapeString(token.prefix)\n      var capture = token.repeat\n        ? '(?:' + token.pattern + ')(?:' + prefix + '(?:' + token.pattern + '))*'\n        : token.pattern\n\n      if (keys) keys.push(token)\n\n      if (token.optional) {\n        if (token.partial) {\n          route += prefix + '(' + capture + ')?'\n        } else {\n          route += '(?:' + prefix + '(' + capture + '))?'\n        }\n      } else {\n        route += prefix + '(' + capture + ')'\n      }\n    }\n  }\n\n  if (end) {\n    if (!strict) route += '(?:' + delimiter + ')?'\n\n    route += endsWith === '$' ? '$' : '(?=' + endsWith + ')'\n  } else {\n    if (!strict) route += '(?:' + delimiter + '(?=' + endsWith + '))?'\n    if (!isEndDelimited) route += '(?=' + delimiter + '|' + endsWith + ')'\n  }\n\n  return new RegExp('^' + route, flags(options))\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {Array=}                keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, keys)\n  }\n\n  if (Array.isArray(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), keys, options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), keys, options)\n}\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright (c) 2015-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport pathToRegexp from 'path-to-regexp'\n\nconst { hasOwnProperty } = Object.prototype\nconst cache = new Map()\n\nfunction decodeParam(val) {\n  try {\n    return decodeURIComponent(val)\n  } catch (err) {\n    return val\n  }\n}\n\nfunction matchPath(route, pathname, parentKeys, parentParams) {\n  const end = !route.children\n  const cacheKey = `${route.path || ''}|${end}`\n  let regexp = cache.get(cacheKey)\n\n  if (!regexp) {\n    const keys = []\n    regexp = {\n      keys,\n      pattern: pathToRegexp(route.path || '', keys, { end }),\n    }\n    cache.set(cacheKey, regexp)\n  }\n\n  const m = regexp.pattern.exec(pathname)\n  if (!m) {\n    return null\n  }\n\n  const path = m[0]\n  const params = Object.assign({}, parentParams)\n\n  for (let i = 1; i < m.length; i++) {\n    const key = regexp.keys[i - 1]\n    const prop = key.name\n    const value = m[i]\n    if (value !== undefined || !hasOwnProperty.call(params, prop)) {\n      if (key.repeat) {\n        params[prop] = value ? value.split(key.delimiter).map(decodeParam) : []\n      } else {\n        params[prop] = value ? decodeParam(value) : value\n      }\n    }\n  }\n\n  return {\n    path: !end && path.charAt(path.length - 1) === '/' ? path.substr(1) : path,\n    keys: parentKeys.concat(regexp.keys),\n    params,\n  }\n}\n\nexport default matchPath\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright (c) 2015-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport matchPath from './matchPath'\n\nfunction matchRoute(route, baseUrl, pathname, parentKeys, parentParams) {\n  let match\n  let childMatches\n  let childIndex = 0\n\n  return {\n    next(routeToSkip) {\n      if (route === routeToSkip) {\n        return { done: true }\n      }\n\n      if (!match) {\n        match = matchPath(route, pathname, parentKeys, parentParams)\n\n        if (match) {\n          return {\n            done: false,\n            value: {\n              route,\n              baseUrl,\n              path: match.path,\n              keys: match.keys,\n              params: match.params,\n            },\n          }\n        }\n      }\n\n      if (match && route.children) {\n        while (childIndex < route.children.length) {\n          if (!childMatches) {\n            const childRoute = route.children[childIndex]\n            childRoute.parent = route\n\n            childMatches = matchRoute(\n              childRoute,\n              baseUrl + match.path,\n              pathname.substr(match.path.length),\n              match.keys,\n              match.params,\n            )\n          }\n\n          const childMatch = childMatches.next(routeToSkip)\n          if (!childMatch.done) {\n            return {\n              done: false,\n              value: childMatch.value,\n            }\n          }\n\n          childMatches = null\n          childIndex++\n        }\n      }\n\n      return { done: true }\n    },\n  }\n}\n\nexport default matchRoute\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright (c) 2015-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nfunction resolveRoute(context, params) {\n  if (typeof context.route.action === 'function') {\n    return context.route.action(context, params)\n  }\n  return undefined\n}\n\nexport default resolveRoute\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright (c) 2015-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport pathToRegexp from 'path-to-regexp'\nimport matchRoute from './matchRoute'\nimport resolveRoute from './resolveRoute'\n\nfunction isChildRoute(parentRoute, childRoute) {\n  let route = childRoute\n  while (route) {\n    route = route.parent\n    if (route === parentRoute) {\n      return true\n    }\n  }\n  return false\n}\n\nclass UniversalRouter {\n  constructor(routes, options = {}) {\n    if (Object(routes) !== routes) {\n      throw new TypeError('Invalid routes')\n    }\n\n    this.baseUrl = options.baseUrl || ''\n    this.errorHandler = options.errorHandler\n    this.resolveRoute = options.resolveRoute || resolveRoute\n    this.context = Object.assign({ router: this }, options.context)\n    this.root = Array.isArray(routes) ? { path: '', children: routes, parent: null } : routes\n    this.root.parent = null\n  }\n\n  resolve(pathnameOrContext) {\n    const context = Object.assign(\n      {},\n      this.context,\n      typeof pathnameOrContext === 'string' ? { pathname: pathnameOrContext } : pathnameOrContext,\n    )\n    const match = matchRoute(\n      this.root,\n      this.baseUrl,\n      context.pathname.substr(this.baseUrl.length),\n      [],\n      null,\n    )\n    const resolve = this.resolveRoute\n    let matches = null\n    let nextMatches = null\n    let currentContext = context\n\n    function next(resume, parent = matches.value.route, prevResult) {\n      const routeToSkip = prevResult === null && matches.value.route\n      matches = nextMatches || match.next(routeToSkip)\n      nextMatches = null\n\n      if (!resume) {\n        if (matches.done || !isChildRoute(parent, matches.value.route)) {\n          nextMatches = matches\n          return Promise.resolve(null)\n        }\n      }\n\n      if (matches.done) {\n        const error = new Error('Page not found')\n        error.context = context\n        error.code = 404\n        return Promise.reject(error)\n      }\n\n      currentContext = Object.assign({}, context, matches.value)\n\n      return Promise.resolve(resolve(currentContext, matches.value.params)).then((result) => {\n        if (result !== null && result !== undefined) {\n          return result\n        }\n        return next(resume, parent, result)\n      })\n    }\n\n    context.next = next\n\n    return Promise.resolve()\n      .then(() => next(true, this.root))\n      .catch((error) => {\n        error.context = error.context || currentContext\n        error.code = error.code || 500\n        if (this.errorHandler) {\n          return this.errorHandler(error)\n        }\n        throw error\n      })\n  }\n}\n\nUniversalRouter.pathToRegexp = pathToRegexp\n\nexport default UniversalRouter\n"],"names":["pathToRegexp","parse","str","options","tokensToFunction","tokensToRegExp","DEFAULT_DELIMITER","DEFAULT_DELIMITERS","PATH_REGEXP","RegExp","join","res","tokens","key","index","path","defaultDelimiter","delimiter","delimiters","pathEscaped","exec","m","escaped","offset","slice","length","prev","next","name","capture","group","modifier","k","indexOf","push","partial","undefined","repeat","optional","pattern","escapeGroup","escapeString","substr","matches","Array","i","data","encode","encodeURIComponent","token","segment","value","isArray","TypeError","j","test","prefix","String","replace","flags","sensitive","keys","strict","end","endsWith","concat","map","route","isEndDelimited","groups","source","match","regexpToRegexp","parts","arrayToRegexp","stringToRegexp","hasOwnProperty","Object","prototype","cache","Map","decodeParam","val","decodeURIComponent","err","matchRoute","baseUrl","pathname","parentKeys","parentParams","childMatches","childIndex","routeToSkip","children","cacheKey","regexp","get","set","params","assign","prop","call","split","charAt","matchPath","childRoute","parent","childMatch","done","resolveRoute","context","action","UniversalRouter","routes","errorHandler","this","root","resolve","pathnameOrContext","nextMatches","currentContext","resume","prevResult","parentRoute","isChildRoute","Promise","error","Error","code","reject","then","result","_this","catch"],"mappings":"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"}