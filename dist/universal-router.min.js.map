{"version":3,"file":"universal-router.min.js","sources":["../node_modules/path-to-regexp/index.js","src/matchPath.js","src/matchRoute.js","src/resolveRoute.js","src/UniversalRouter.js"],"sourcesContent":["/**\n * Expose `pathToRegexp`.\n */\nmodule.exports = pathToRegexp\nmodule.exports.parse = parse\nmodule.exports.compile = compile\nmodule.exports.tokensToFunction = tokensToFunction\nmodule.exports.tokensToRegExp = tokensToRegExp\n\n/**\n * Default configs.\n */\nvar DEFAULT_DELIMITER = '/'\nvar DEFAULT_DELIMITERS = './'\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\"]\n  // \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined]\n  '(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?'\n].join('|'), 'g')\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = []\n  var key = 0\n  var index = 0\n  var path = ''\n  var defaultDelimiter = (options && options.delimiter) || DEFAULT_DELIMITER\n  var delimiters = (options && options.delimiters) || DEFAULT_DELIMITERS\n  var pathEscaped = false\n  var res\n\n  while ((res = PATH_REGEXP.exec(str)) !== null) {\n    var m = res[0]\n    var escaped = res[1]\n    var offset = res.index\n    path += str.slice(index, offset)\n    index = offset + m.length\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1]\n      pathEscaped = true\n      continue\n    }\n\n    var prev = ''\n    var next = str[index]\n    var name = res[2]\n    var capture = res[3]\n    var group = res[4]\n    var modifier = res[5]\n\n    if (!pathEscaped && path.length) {\n      var k = path.length - 1\n\n      if (delimiters.indexOf(path[k]) > -1) {\n        prev = path[k]\n        path = path.slice(0, k)\n      }\n    }\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path)\n      path = ''\n      pathEscaped = false\n    }\n\n    var partial = prev !== '' && next !== undefined && next !== prev\n    var repeat = modifier === '+' || modifier === '*'\n    var optional = modifier === '?' || modifier === '*'\n    var delimiter = prev || defaultDelimiter\n    var pattern = capture || group\n\n    tokens.push({\n      name: name || key++,\n      prefix: prev,\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      pattern: pattern ? escapeGroup(pattern) : '[^' + escapeString(delimiter) + ']+?'\n    })\n  }\n\n  // Push any remaining characters.\n  if (path || index < str.length) {\n    tokens.push(path + str.substr(index))\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options))\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length)\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$')\n    }\n  }\n\n  return function (data, options) {\n    var path = ''\n    var encode = (options && options.encode) || encodeURIComponent\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i]\n\n      if (typeof token === 'string') {\n        path += token\n        continue\n      }\n\n      var value = data ? data[token.name] : undefined\n      var segment\n\n      if (Array.isArray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but got array')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) continue\n\n          throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j])\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\"')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment\n        }\n\n        continue\n      }\n\n      if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n        segment = encode(String(value))\n\n        if (!matches[i].test(segment)) {\n          throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but got \"' + segment + '\"')\n        }\n\n        path += token.prefix + segment\n        continue\n      }\n\n      if (token.optional) {\n        // Prepend partial segment prefixes.\n        if (token.partial) path += token.prefix\n\n        continue\n      }\n\n      throw new TypeError('Expected \"' + token.name + '\" to be ' + (token.repeat ? 'an array' : 'a string'))\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$/()])/g, '\\\\$1')\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options && options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {Array=}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  if (!keys) return path\n\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g)\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        pattern: null\n      })\n    }\n  }\n\n  return path\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = []\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source)\n  }\n\n  return new RegExp('(?:' + parts.join('|') + ')', flags(options))\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}  tokens\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  options = options || {}\n\n  var strict = options.strict\n  var end = options.end !== false\n  var delimiter = escapeString(options.delimiter || DEFAULT_DELIMITER)\n  var delimiters = options.delimiters || DEFAULT_DELIMITERS\n  var endsWith = [].concat(options.endsWith || []).map(escapeString).concat('$').join('|')\n  var route = ''\n  var isEndDelimited = false\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n\n    if (typeof token === 'string') {\n      route += escapeString(token)\n      isEndDelimited = i === tokens.length - 1 && delimiters.indexOf(token[token.length - 1]) > -1\n    } else {\n      var prefix = escapeString(token.prefix)\n      var capture = token.repeat\n        ? '(?:' + token.pattern + ')(?:' + prefix + '(?:' + token.pattern + '))*'\n        : token.pattern\n\n      if (keys) keys.push(token)\n\n      if (token.optional) {\n        if (token.partial) {\n          route += prefix + '(' + capture + ')?'\n        } else {\n          route += '(?:' + prefix + '(' + capture + '))?'\n        }\n      } else {\n        route += prefix + '(' + capture + ')'\n      }\n    }\n  }\n\n  if (end) {\n    if (!strict) route += '(?:' + delimiter + ')?'\n\n    route += endsWith === '$' ? '$' : '(?=' + endsWith + ')'\n  } else {\n    if (!strict) route += '(?:' + delimiter + '(?=' + endsWith + '))?'\n    if (!isEndDelimited) route += '(?=' + delimiter + '|' + endsWith + ')'\n  }\n\n  return new RegExp('^' + route, flags(options))\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {Array=}                keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, keys)\n  }\n\n  if (Array.isArray(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), keys, options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), keys, options)\n}\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright © 2015-present Kriasoft, LLC. All rights reserved.\n *\n * This source code is licensed under the Apache 2.0 license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport pathToRegexp from 'path-to-regexp';\n\nconst { hasOwnProperty } = Object.prototype;\nconst cache = new Map();\n\nfunction decodeParam(val) {\n  try {\n    return decodeURIComponent(val);\n  } catch (err) {\n    return val;\n  }\n}\n\nfunction matchPath(route, pathname, parentKeys, parentParams) {\n  const end = !route.children;\n  const cacheKey = `${route.path || ''}|${end}`;\n  let regexp = cache.get(cacheKey);\n\n  if (!regexp) {\n    const keys = [];\n    regexp = {\n      keys,\n      pattern: pathToRegexp(route.path || '', keys, { end }),\n    };\n    cache.set(cacheKey, regexp);\n  }\n\n  const m = regexp.pattern.exec(pathname);\n  if (!m) {\n    return null;\n  }\n\n  const path = m[0];\n  const params = Object.assign({}, parentParams);\n\n  for (let i = 1; i < m.length; i += 1) {\n    const key = regexp.keys[i - 1];\n    const prop = key.name;\n    const value = m[i];\n    if (value !== undefined || !hasOwnProperty.call(params, prop)) {\n      if (key.repeat) {\n        params[prop] = value ? value.split(key.delimiter).map(decodeParam) : [];\n      } else {\n        params[prop] = value ? decodeParam(value) : value;\n      }\n    }\n  }\n\n  return {\n    path: !end && path.charAt(path.length - 1) === '/' ? path.substr(1) : path,\n    keys: parentKeys.concat(regexp.keys),\n    params,\n  };\n}\n\nexport default matchPath;\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright © 2015-present Kriasoft, LLC. All rights reserved.\n *\n * This source code is licensed under the Apache 2.0 license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport matchPath from './matchPath';\n\nfunction matchRoute(route, baseUrl, pathname, parentKeys, parentParams) {\n  let match;\n  let childMatches;\n  let childIndex = 0;\n\n  return {\n    next() {\n      if (!match) {\n        match = matchPath(route, pathname, parentKeys, parentParams);\n\n        if (match) {\n          return {\n            done: false,\n            value: {\n              route,\n              baseUrl,\n              path: match.path,\n              keys: match.keys,\n              params: match.params,\n            },\n          };\n        }\n      }\n\n      if (match && route.children) {\n        while (childIndex < route.children.length) {\n          if (!childMatches) {\n            const childRoute = route.children[childIndex];\n            childRoute.parent = route;\n\n            childMatches = matchRoute(\n              childRoute,\n              baseUrl + match.path,\n              pathname.substr(match.path.length),\n              match.keys,\n              match.params,\n            );\n          }\n\n          const childMatch = childMatches.next();\n          if (!childMatch.done) {\n            return {\n              done: false,\n              value: childMatch.value,\n            };\n          }\n\n          childMatches = null;\n          childIndex += 1;\n        }\n      }\n\n      return { done: true };\n    },\n  };\n}\n\nexport default matchRoute;\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright © 2015-present Kriasoft, LLC. All rights reserved.\n *\n * This source code is licensed under the Apache 2.0 license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nfunction resolveRoute(context, params) {\n  if (typeof context.route.action === 'function') {\n    return context.route.action(context, params);\n  }\n\n  return null;\n}\n\nexport default resolveRoute;\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright © 2015-present Kriasoft, LLC. All rights reserved.\n *\n * This source code is licensed under the Apache 2.0 license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport pathToRegexp from 'path-to-regexp';\nimport matchPath from './matchPath';\nimport matchRoute from './matchRoute';\nimport resolveRoute from './resolveRoute';\n\nfunction isChildRoute(parentRoute, childRoute) {\n  let route = childRoute;\n  while (route) {\n    route = route.parent;\n    if (route === parentRoute) {\n      return true;\n    }\n  }\n  return false;\n}\n\nclass UniversalRouter {\n  constructor(routes, options = {}) {\n    if (Object(routes) !== routes) {\n      throw new TypeError('Invalid routes');\n    }\n\n    this.baseUrl = options.baseUrl || '';\n    this.resolveRoute = options.resolveRoute || resolveRoute;\n    this.context = Object.assign({ router: this }, options.context);\n    this.root = Array.isArray(routes) ? { path: '', children: routes, parent: null } : routes;\n    this.root.parent = null;\n  }\n\n  resolve(pathnameOrContext) {\n    const context = Object.assign(\n      {},\n      this.context,\n      typeof pathnameOrContext === 'string' ? { pathname: pathnameOrContext } : pathnameOrContext,\n    );\n    const match = matchRoute(\n      this.root,\n      this.baseUrl,\n      context.pathname.substr(this.baseUrl.length),\n      [],\n      null,\n    );\n    const resolve = this.resolveRoute;\n    let matches = null;\n    let nextMatches = null;\n\n    function next(resume, parent = matches.value.route) {\n      matches = nextMatches || match.next();\n      nextMatches = null;\n\n      if (!resume) {\n        if (matches.done || !isChildRoute(parent, matches.value.route)) {\n          nextMatches = matches;\n          return Promise.resolve(null);\n        }\n      }\n\n      if (matches.done) {\n        return Promise.reject(Object.assign(\n          new Error('Page not found'),\n          { context, status: 404, statusCode: 404 },\n        ));\n      }\n\n      return Promise.resolve(resolve(\n        Object.assign({}, context, matches.value),\n        matches.value.params,\n      )).then((result) => {\n        if (result !== null && result !== undefined) {\n          return result;\n        }\n\n        return next(resume, parent);\n      });\n    }\n\n    context.next = next;\n\n    return next(true, this.root);\n  }\n}\n\nUniversalRouter.pathToRegexp = pathToRegexp;\nUniversalRouter.matchPath = matchPath;\nUniversalRouter.matchRoute = matchRoute;\nUniversalRouter.resolveRoute = resolveRoute;\n\nexport default UniversalRouter;\n"],"names":["parse","str","options","res","tokens","key","index","path","defaultDelimiter","delimiter","DEFAULT_DELIMITER","delimiters","DEFAULT_DELIMITERS","pathEscaped","PATH_REGEXP","exec","m","escaped","offset","slice","length","prev","next","name","capture","group","modifier","k","indexOf","push","partial","undefined","repeat","optional","pattern","prefix","escapeGroup","escapeString","substr","tokensToFunction","matches","Array","i","RegExp","data","encode","encodeURIComponent","token","segment","value","isArray","TypeError","j","test","String","replace","flags","sensitive","regexpToRegexp","keys","groups","source","match","arrayToRegexp","parts","pathToRegexp","join","stringToRegexp","tokensToRegExp","strict","end","endsWith","concat","map","route","isEndDelimited","decodeParam","val","decodeURIComponent","err","matchPath","pathname","parentKeys","parentParams","children","cacheKey","regexp","cache","get","set","params","Object","assign","prop","hasOwnProperty","call","split","charAt","matchRoute","baseUrl","childMatches","childIndex","childRoute","parent","childMatch","done","resolveRoute","context","action","isChildRoute","parentRoute","prototype","Map","UniversalRouter","routes","router","this","root","pathnameOrContext","resume","nextMatches","Promise","reject","Error","status","statusCode","resolve","then","result"],"mappings":"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"}