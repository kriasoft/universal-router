{"version":3,"file":"universal-router.min.js","sources":["../node_modules/path-to-regexp/index.js","src/matchPath.js","src/matchRoute.js","src/resolveRoute.js","src/UniversalRouter.js"],"sourcesContent":["/**\n * Expose `pathToRegexp`.\n */\nmodule.exports = pathToRegexp\nmodule.exports.parse = parse\nmodule.exports.compile = compile\nmodule.exports.tokensToFunction = tokensToFunction\nmodule.exports.tokensToRegExp = tokensToRegExp\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\"]\n  // \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined]\n  '(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?'\n].join('|'), 'g')\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = []\n  var key = 0\n  var index = 0\n  var path = ''\n  var defaultDelimiter = (options && options.delimiter) || '/'\n  var delimiters = (options && options.delimiters) || './'\n  var pathEscaped = false\n  var res\n\n  while ((res = PATH_REGEXP.exec(str)) !== null) {\n    var m = res[0]\n    var escaped = res[1]\n    var offset = res.index\n    path += str.slice(index, offset)\n    index = offset + m.length\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1]\n      pathEscaped = true\n      continue\n    }\n\n    var prev = ''\n    var next = str[index]\n    var name = res[2]\n    var capture = res[3]\n    var group = res[4]\n    var modifier = res[5]\n\n    if (!pathEscaped && path.length) {\n      var k = path.length - 1\n\n      if (delimiters.indexOf(path[k]) > -1) {\n        prev = path[k]\n        path = path.slice(0, k)\n      }\n    }\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path)\n      path = ''\n      pathEscaped = false\n    }\n\n    var partial = prev !== '' && next !== undefined && next !== prev\n    var repeat = modifier === '+' || modifier === '*'\n    var optional = modifier === '?' || modifier === '*'\n    var delimiter = prev || defaultDelimiter\n    var pattern = capture || group\n\n    tokens.push({\n      name: name || key++,\n      prefix: prev,\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      pattern: pattern ? escapeGroup(pattern) : '[^' + escapeString(delimiter) + ']+?'\n    })\n  }\n\n  // Push any remaining characters.\n  if (path || index < str.length) {\n    tokens.push(path + str.substr(index))\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options))\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length)\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$')\n    }\n  }\n\n  return function (data, options) {\n    var path = ''\n    var encode = (options && options.encode) || encodeURIComponent\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i]\n\n      if (typeof token === 'string') {\n        path += token\n        continue\n      }\n\n      var value = data ? data[token.name] : undefined\n      var segment\n\n      if (Array.isArray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but got array')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) continue\n\n          throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j])\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\"')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment\n        }\n\n        continue\n      }\n\n      if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n        segment = encode(String(value))\n\n        if (!matches[i].test(segment)) {\n          throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but got \"' + segment + '\"')\n        }\n\n        path += token.prefix + segment\n        continue\n      }\n\n      if (token.optional) {\n        // Prepend partial segment prefixes.\n        if (token.partial) path += token.prefix\n\n        continue\n      }\n\n      throw new TypeError('Expected \"' + token.name + '\" to be ' + (token.repeat ? 'an array' : 'a string'))\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$/()])/g, '\\\\$1')\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options && options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {Array=}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  if (!keys) return path\n\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g)\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        pattern: null\n      })\n    }\n  }\n\n  return path\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = []\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source)\n  }\n\n  return new RegExp('(?:' + parts.join('|') + ')', flags(options))\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}  tokens\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  options = options || {}\n\n  var strict = options.strict\n  var end = options.end !== false\n  var delimiter = escapeString(options.delimiter || '/')\n  var endsWith = [].concat(options.endsWith || []).map(escapeString).concat('$').join('|')\n  var route = ''\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n\n    if (typeof token === 'string') {\n      route += escapeString(token)\n    } else {\n      var prefix = escapeString(token.prefix)\n      var capture = '(?:' + token.pattern + ')'\n\n      if (keys) keys.push(token)\n\n      if (token.repeat) {\n        capture += '(?:' + prefix + capture + ')*'\n      }\n\n      if (token.optional) {\n        if (!token.partial) {\n          capture = '(?:' + prefix + '(' + capture + '))?'\n        } else {\n          capture = prefix + '(' + capture + ')?'\n        }\n      } else {\n        capture = prefix + '(' + capture + ')'\n      }\n\n      route += capture\n    }\n  }\n\n  // In non-strict mode we allow a delimiter at the end of a match.\n  if (!strict) {\n    route += '(?:' + delimiter + '(?=' + endsWith + '))?'\n  }\n\n  if (end) {\n    route += endsWith === '$' ? endsWith : '(?=' + endsWith + ')'\n  } else {\n    // In non-ending mode, we need the capturing groups to match as much as\n    // possible by using a positive lookahead to the end or next path segment.\n    route += '(?=' + delimiter + '|' + endsWith + ')'\n  }\n\n  return new RegExp('^' + route, flags(options))\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {Array=}                keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, keys)\n  }\n\n  if (Array.isArray(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), keys, options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), keys, options)\n}\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright © 2015-present Kriasoft, LLC. All rights reserved.\n *\n * This source code is licensed under the Apache 2.0 license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport pathToRegexp from 'path-to-regexp';\n\nconst { hasOwnProperty } = Object.prototype;\nconst cache = new Map();\n\nfunction decodeParam(val) {\n  try {\n    return decodeURIComponent(val);\n  } catch (err) {\n    return val;\n  }\n}\n\nfunction matchPath(route, pathname, parentKeys, parentParams) {\n  const end = !route.children;\n  const cacheKey = `${route.path || ''}|${end}`;\n  let regexp = cache.get(cacheKey);\n\n  if (!regexp) {\n    const keys = [];\n    regexp = {\n      keys,\n      pattern: pathToRegexp(route.path || '', keys, { end }),\n    };\n    cache.set(cacheKey, regexp);\n  }\n\n  const m = regexp.pattern.exec(pathname);\n  if (!m) {\n    return null;\n  }\n\n  const path = m[0];\n  const params = Object.assign({}, parentParams);\n\n  for (let i = 1; i < m.length; i += 1) {\n    const key = regexp.keys[i - 1];\n    const prop = key.name;\n    const value = m[i];\n    if (value !== undefined || !hasOwnProperty.call(params, prop)) {\n      if (key.repeat) {\n        params[prop] = value ? value.split(key.delimiter).map(decodeParam) : [];\n      } else {\n        params[prop] = value ? decodeParam(value) : value;\n      }\n    }\n  }\n\n  return {\n    path: !end && path.charAt(path.length - 1) === '/' ? path.substr(1) : path,\n    keys: regexp.keys.concat(parentKeys),\n    params,\n  };\n}\n\nexport default matchPath;\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright © 2015-present Kriasoft, LLC. All rights reserved.\n *\n * This source code is licensed under the Apache 2.0 license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport matchPath from './matchPath';\n\nfunction matchRoute(route, baseUrl, pathname, parentKeys, parentParams) {\n  let match;\n  let childMatches;\n  let childIndex = 0;\n\n  return {\n    next() {\n      if (!match) {\n        match = matchPath(route, pathname, parentKeys, parentParams);\n\n        if (match) {\n          return {\n            done: false,\n            value: {\n              route,\n              baseUrl,\n              path: match.path,\n              keys: match.keys,\n              params: match.params,\n            },\n          };\n        }\n      }\n\n      if (match && route.children) {\n        while (childIndex < route.children.length) {\n          if (!childMatches) {\n            const childRoute = route.children[childIndex];\n            childRoute.parent = route;\n\n            childMatches = matchRoute(\n              childRoute,\n              baseUrl + match.path,\n              pathname.substr(match.path.length),\n              match.keys,\n              match.params,\n            );\n          }\n\n          const childMatch = childMatches.next();\n          if (!childMatch.done) {\n            return {\n              done: false,\n              value: childMatch.value,\n            };\n          }\n\n          childMatches = null;\n          childIndex += 1;\n        }\n      }\n\n      return { done: true };\n    },\n  };\n}\n\nexport default matchRoute;\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright © 2015-present Kriasoft, LLC. All rights reserved.\n *\n * This source code is licensed under the Apache 2.0 license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nfunction resolveRoute(context, params) {\n  if (typeof context.route.action === 'function') {\n    return context.route.action(context, params);\n  }\n\n  return null;\n}\n\nexport default resolveRoute;\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright © 2015-present Kriasoft, LLC. All rights reserved.\n *\n * This source code is licensed under the Apache 2.0 license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport pathToRegexp from 'path-to-regexp';\nimport matchPath from './matchPath';\nimport matchRoute from './matchRoute';\nimport resolveRoute from './resolveRoute';\n\nfunction isChildRoute(parentRoute, childRoute) {\n  let route = childRoute;\n  while (route) {\n    route = route.parent;\n    if (route === parentRoute) {\n      return true;\n    }\n  }\n  return false;\n}\n\nclass UniversalRouter {\n  constructor(routes, options = {}) {\n    if (Object(routes) !== routes) {\n      throw new TypeError('Invalid routes');\n    }\n\n    this.baseUrl = options.baseUrl || '';\n    this.resolveRoute = options.resolveRoute || resolveRoute;\n    this.context = Object.assign({ router: this }, options.context);\n    this.root = Array.isArray(routes) ? { path: '', children: routes, parent: null } : routes;\n    this.root.parent = null;\n  }\n\n  resolve(pathnameOrContext) {\n    const context = Object.assign(\n      {},\n      this.context,\n      typeof pathnameOrContext === 'string' ? { pathname: pathnameOrContext } : pathnameOrContext,\n    );\n    const match = matchRoute(\n      this.root,\n      this.baseUrl,\n      context.pathname.substr(this.baseUrl.length),\n      [],\n      null,\n    );\n    const resolve = this.resolveRoute;\n    let matches = null;\n    let nextMatches = null;\n\n    function next(resume, parent = matches.value.route) {\n      matches = nextMatches || match.next();\n      nextMatches = null;\n\n      if (!resume) {\n        if (matches.done || !isChildRoute(parent, matches.value.route)) {\n          nextMatches = matches;\n          return Promise.resolve(null);\n        }\n      }\n\n      if (matches.done) {\n        return Promise.reject(Object.assign(\n          new Error('Page not found'),\n          { context, status: 404, statusCode: 404 },\n        ));\n      }\n\n      return Promise.resolve(resolve(\n        Object.assign({}, context, matches.value),\n        matches.value.params,\n      )).then((result) => {\n        if (result !== null && result !== undefined) {\n          return result;\n        }\n\n        return next(resume, parent);\n      });\n    }\n\n    context.next = next;\n\n    return next(true, this.root);\n  }\n}\n\nUniversalRouter.pathToRegexp = pathToRegexp;\nUniversalRouter.matchPath = matchPath;\nUniversalRouter.matchRoute = matchRoute;\nUniversalRouter.resolveRoute = resolveRoute;\n\nexport default UniversalRouter;\n"],"names":["parse","str","options","res","tokens","key","index","path","defaultDelimiter","delimiter","delimiters","pathEscaped","PATH_REGEXP","exec","m","escaped","offset","slice","length","prev","next","name","capture","group","modifier","k","indexOf","push","partial","undefined","repeat","optional","pattern","prefix","escapeGroup","escapeString","substr","tokensToFunction","matches","Array","i","RegExp","data","encode","encodeURIComponent","token","segment","value","isArray","TypeError","j","test","String","replace","flags","sensitive","regexpToRegexp","keys","groups","source","match","arrayToRegexp","parts","pathToRegexp","join","stringToRegexp","tokensToRegExp","strict","end","endsWith","concat","map","route","decodeParam","val","decodeURIComponent","err","matchPath","pathname","parentKeys","parentParams","children","cacheKey","regexp","cache","get","set","params","Object","assign","prop","hasOwnProperty","call","split","charAt","matchRoute","baseUrl","childMatches","childIndex","childRoute","parent","childMatch","done","resolveRoute","context","action","isChildRoute","parentRoute","prototype","Map","UniversalRouter","routes","router","this","root","pathnameOrContext","resume","nextMatches","Promise","reject","Error","status","statusCode","resolve","then","result"],"mappings":"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"}