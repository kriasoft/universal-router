{"version":3,"file":"universal-router.min.js","sources":["../node_modules/path-to-regexp/index.js","src/matchPath.js","src/matchRoute.js","src/UniversalRouter.js"],"sourcesContent":["/**\n * Expose `pathToRegexp`.\n */\nmodule.exports = pathToRegexp\nmodule.exports.parse = parse\nmodule.exports.compile = compile\nmodule.exports.tokensToFunction = tokensToFunction\nmodule.exports.tokensToRegExp = tokensToRegExp\n\n/**\n * Default configs.\n */\nvar DEFAULT_DELIMITER = '/'\nvar DEFAULT_DELIMITERS = './'\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \":test(\\\\d+)?\" => [\"test\", \"\\d+\", undefined, \"?\"]\n  // \"(\\\\d+)\"  => [undefined, undefined, \"\\d+\", undefined]\n  '(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?'\n].join('|'), 'g')\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = []\n  var key = 0\n  var index = 0\n  var path = ''\n  var defaultDelimiter = (options && options.delimiter) || DEFAULT_DELIMITER\n  var delimiters = (options && options.delimiters) || DEFAULT_DELIMITERS\n  var pathEscaped = false\n  var res\n\n  while ((res = PATH_REGEXP.exec(str)) !== null) {\n    var m = res[0]\n    var escaped = res[1]\n    var offset = res.index\n    path += str.slice(index, offset)\n    index = offset + m.length\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1]\n      pathEscaped = true\n      continue\n    }\n\n    var prev = ''\n    var next = str[index]\n    var name = res[2]\n    var capture = res[3]\n    var group = res[4]\n    var modifier = res[5]\n\n    if (!pathEscaped && path.length) {\n      var k = path.length - 1\n\n      if (delimiters.indexOf(path[k]) > -1) {\n        prev = path[k]\n        path = path.slice(0, k)\n      }\n    }\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path)\n      path = ''\n      pathEscaped = false\n    }\n\n    var partial = prev !== '' && next !== undefined && next !== prev\n    var repeat = modifier === '+' || modifier === '*'\n    var optional = modifier === '?' || modifier === '*'\n    var delimiter = prev || defaultDelimiter\n    var pattern = capture || group\n\n    tokens.push({\n      name: name || key++,\n      prefix: prev,\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      pattern: pattern ? escapeGroup(pattern) : '[^' + escapeString(delimiter) + ']+?'\n    })\n  }\n\n  // Push any remaining characters.\n  if (path || index < str.length) {\n    tokens.push(path + str.substr(index))\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options))\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length)\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$')\n    }\n  }\n\n  return function (data, options) {\n    var path = ''\n    var encode = (options && options.encode) || encodeURIComponent\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i]\n\n      if (typeof token === 'string') {\n        path += token\n        continue\n      }\n\n      var value = data ? data[token.name] : undefined\n      var segment\n\n      if (Array.isArray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but got array')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) continue\n\n          throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j], token)\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\"')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment\n        }\n\n        continue\n      }\n\n      if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n        segment = encode(String(value), token)\n\n        if (!matches[i].test(segment)) {\n          throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but got \"' + segment + '\"')\n        }\n\n        path += token.prefix + segment\n        continue\n      }\n\n      if (token.optional) {\n        // Prepend partial segment prefixes.\n        if (token.partial) path += token.prefix\n\n        continue\n      }\n\n      throw new TypeError('Expected \"' + token.name + '\" to be ' + (token.repeat ? 'an array' : 'a string'))\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$/()])/g, '\\\\$1')\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options && options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {Array=}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  if (!keys) return path\n\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g)\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        pattern: null\n      })\n    }\n  }\n\n  return path\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = []\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source)\n  }\n\n  return new RegExp('(?:' + parts.join('|') + ')', flags(options))\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}  tokens\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  options = options || {}\n\n  var strict = options.strict\n  var start = options.start !== false\n  var end = options.end !== false\n  var delimiter = escapeString(options.delimiter || DEFAULT_DELIMITER)\n  var delimiters = options.delimiters || DEFAULT_DELIMITERS\n  var endsWith = [].concat(options.endsWith || []).map(escapeString).concat('$').join('|')\n  var route = start ? '^' : ''\n  var isEndDelimited = tokens.length === 0\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n\n    if (typeof token === 'string') {\n      route += escapeString(token)\n      isEndDelimited = i === tokens.length - 1 && delimiters.indexOf(token[token.length - 1]) > -1\n    } else {\n      var capture = token.repeat\n        ? '(?:' + token.pattern + ')(?:' + escapeString(token.delimiter) + '(?:' + token.pattern + '))*'\n        : token.pattern\n\n      if (keys) keys.push(token)\n\n      if (token.optional) {\n        if (token.partial) {\n          route += escapeString(token.prefix) + '(' + capture + ')?'\n        } else {\n          route += '(?:' + escapeString(token.prefix) + '(' + capture + '))?'\n        }\n      } else {\n        route += escapeString(token.prefix) + '(' + capture + ')'\n      }\n    }\n  }\n\n  if (end) {\n    if (!strict) route += '(?:' + delimiter + ')?'\n\n    route += endsWith === '$' ? '$' : '(?=' + endsWith + ')'\n  } else {\n    if (!strict) route += '(?:' + delimiter + '(?=' + endsWith + '))?'\n    if (!isEndDelimited) route += '(?=' + delimiter + '|' + endsWith + ')'\n  }\n\n  return new RegExp(route, flags(options))\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {Array=}                keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, keys)\n  }\n\n  if (Array.isArray(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), keys, options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), keys, options)\n}\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright (c) 2015-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport pathToRegexp from 'path-to-regexp'\n\nconst { hasOwnProperty } = Object.prototype\nconst cache = new Map()\n\nfunction decodeParam(val) {\n  try {\n    return decodeURIComponent(val)\n  } catch (err) {\n    return val\n  }\n}\n\nfunction matchPath(route, pathname, parentKeys, parentParams) {\n  const end = !route.children\n  const cacheKey = `${route.path || ''}|${end}`\n  let regexp = cache.get(cacheKey)\n\n  if (!regexp) {\n    const keys = []\n    regexp = {\n      keys,\n      pattern: pathToRegexp(route.path || '', keys, { end }),\n    }\n    cache.set(cacheKey, regexp)\n  }\n\n  const m = regexp.pattern.exec(pathname)\n  if (!m) {\n    return null\n  }\n\n  const path = m[0]\n  const params = { ...parentParams }\n\n  for (let i = 1; i < m.length; i++) {\n    const key = regexp.keys[i - 1]\n    const prop = key.name\n    const value = m[i]\n    if (value !== undefined || !hasOwnProperty.call(params, prop)) {\n      if (key.repeat) {\n        params[prop] = value ? value.split(key.delimiter).map(decodeParam) : []\n      } else {\n        params[prop] = value ? decodeParam(value) : value\n      }\n    }\n  }\n\n  return {\n    path: !end && path.charAt(path.length - 1) === '/' ? path.substr(1) : path,\n    keys: parentKeys.concat(regexp.keys),\n    params,\n  }\n}\n\nexport default matchPath\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright (c) 2015-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport matchPath from './matchPath'\n\nfunction matchRoute(route, baseUrl, pathname, parentKeys, parentParams) {\n  let match\n  let childMatches\n  let childIndex = 0\n\n  return {\n    next(routeToSkip) {\n      if (route === routeToSkip) {\n        return { done: true }\n      }\n\n      if (!match) {\n        match = matchPath(route, pathname, parentKeys, parentParams)\n\n        if (match) {\n          return {\n            done: false,\n            value: {\n              route,\n              baseUrl,\n              path: match.path,\n              keys: match.keys,\n              params: match.params,\n            },\n          }\n        }\n      }\n\n      if (match && route.children) {\n        while (childIndex < route.children.length) {\n          if (!childMatches) {\n            const childRoute = route.children[childIndex]\n            childRoute.parent = route\n\n            childMatches = matchRoute(\n              childRoute,\n              baseUrl + match.path,\n              pathname.substr(match.path.length),\n              match.keys,\n              match.params,\n            )\n          }\n\n          const childMatch = childMatches.next(routeToSkip)\n          if (!childMatch.done) {\n            return {\n              done: false,\n              value: childMatch.value,\n            }\n          }\n\n          childMatches = null\n          childIndex++\n        }\n      }\n\n      return { done: true }\n    },\n  }\n}\n\nexport default matchRoute\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright (c) 2015-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport pathToRegexp from 'path-to-regexp'\nimport matchRoute from './matchRoute'\n\nfunction resolveRoute(context, params) {\n  if (typeof context.route.action === 'function') {\n    return context.route.action(context, params)\n  }\n  return undefined\n}\n\nfunction isChildRoute(parentRoute, childRoute) {\n  let route = childRoute\n  while (route) {\n    route = route.parent\n    if (route === parentRoute) {\n      return true\n    }\n  }\n  return false\n}\n\nclass UniversalRouter {\n  constructor(routes, options = {}) {\n    if (!routes || typeof routes !== 'object') {\n      throw new TypeError('Invalid routes')\n    }\n\n    this.baseUrl = options.baseUrl || ''\n    this.errorHandler = options.errorHandler\n    this.resolveRoute = options.resolveRoute || resolveRoute\n    this.context = { router: this, ...options.context }\n    this.root = Array.isArray(routes) ? { path: '', children: routes, parent: null } : routes\n    this.root.parent = null\n  }\n\n  resolve(pathnameOrContext) {\n    const context = {\n      ...this.context,\n      ...(typeof pathnameOrContext === 'string'\n        ? { pathname: pathnameOrContext }\n        : pathnameOrContext),\n    }\n    const match = matchRoute(\n      this.root,\n      this.baseUrl,\n      context.pathname.substr(this.baseUrl.length),\n      [],\n      null,\n    )\n    const resolve = this.resolveRoute\n    let matches = null\n    let nextMatches = null\n    let currentContext = context\n\n    function next(resume, parent = matches.value.route, prevResult) {\n      const routeToSkip = prevResult === null && matches.value.route\n      matches = nextMatches || match.next(routeToSkip)\n      nextMatches = null\n\n      if (!resume) {\n        if (matches.done || !isChildRoute(parent, matches.value.route)) {\n          nextMatches = matches\n          return Promise.resolve(null)\n        }\n      }\n\n      if (matches.done) {\n        const error = new Error('Route not found')\n        error.status = 404\n        return Promise.reject(error)\n      }\n\n      currentContext = { ...context, ...matches.value }\n\n      return Promise.resolve(resolve(currentContext, matches.value.params)).then((result) => {\n        if (result !== null && result !== undefined) {\n          return result\n        }\n        return next(resume, parent, result)\n      })\n    }\n\n    context.next = next\n\n    return Promise.resolve()\n      .then(() => next(true, this.root))\n      .catch((error) => {\n        if (this.errorHandler) {\n          return this.errorHandler(error, currentContext)\n        }\n        throw error\n      })\n  }\n}\n\nUniversalRouter.pathToRegexp = pathToRegexp\n\nexport default UniversalRouter\n"],"names":["pathToRegexp","parse","str","options","tokensToFunction","tokensToRegExp","DEFAULT_DELIMITER","DEFAULT_DELIMITERS","PATH_REGEXP","RegExp","join","res","group","tokens","key","index","path","defaultDelimiter","delimiter","delimiters","pathEscaped","exec","m","escaped","offset","slice","length","prev","next","name","capture","modifier","k","indexOf","push","partial","undefined","repeat","optional","pattern","prefix","replace","escapeString","substr","matches","Array","i","data","encode","encodeURIComponent","token","segment","value","isArray","TypeError","j","test","String","flags","sensitive","keys","strict","start","end","endsWith","concat","map","route","isEndDelimited","groups","source","match","regexpToRegexp","parts","arrayToRegexp","hasOwnProperty","Object","prototype","cache","Map","decodeParam","val","decodeURIComponent","err","matchRoute","baseUrl","pathname","parentKeys","parentParams","childMatches","childIndex","routeToSkip","done","children","cacheKey","regexp","get","set","params","prop","call","split","charAt","matchPath","childRoute","parent","childMatch","resolveRoute","context","action","UniversalRouter","routes","errorHandler","router","this","root","resolve","pathnameOrContext","nextMatches","currentContext","resume","prevResult","parentRoute","isChildRoute","Promise","error","Error","status","reject","then","result","_this","catch"],"mappings":";qMAGA,MAAiBA,IACMC,IAkHvB,SAAkBC,EAAKC,UACdC,EAAiBH,EAAMC,EAAKC,OAjHHC,IACFC,EAK5BC,EAAoB,IACpBC,EAAqB,KAOrBC,EAAc,IAAIC,OAAO,CAG3B,UAMA,uFACAC,KAAK,KAAM,KASb,SAAST,EAAOC,EAAKC,WAQfQ,EAyKgBC,EAhLhBC,EAAS,GACTC,EAAM,EACNC,EAAQ,EACRC,EAAO,GACPC,EAAoBd,GAAWA,EAAQe,WAAcZ,EACrDa,EAAchB,GAAWA,EAAQgB,YAAeZ,EAChDa,GAAc,EAGuB,QAAjCT,EAAMH,EAAYa,KAAKnB,KAAgB,KACzCoB,EAAIX,EAAI,GACRY,EAAUZ,EAAI,GACda,EAASb,EAAII,SACjBC,GAAQd,EAAIuB,MAAMV,EAAOS,GACzBT,EAAQS,EAASF,EAAEI,OAGfH,EACFP,GAAQO,EAAQ,GAChBH,GAAc,WAIZO,EAAO,GACPC,EAAO1B,EAAIa,GACXc,EAAOlB,EAAI,GACXmB,EAAUnB,EAAI,GACdC,EAAQD,EAAI,GACZoB,EAAWpB,EAAI,OAEdS,GAAeJ,EAAKU,OAAQ,KAC3BM,EAAIhB,EAAKU,OAAS,GAEa,EAA/BP,EAAWc,QAAQjB,EAAKgB,MAC1BL,EAAOX,EAAKgB,GACZhB,EAAOA,EAAKS,MAAM,EAAGO,IAKrBhB,IACFH,EAAOqB,KAAKlB,GACZA,EAAO,GACPI,GAAc,OAGZe,EAAmB,KAATR,QAAwBS,IAATR,GAAsBA,IAASD,EACxDU,EAAsB,MAAbN,GAAiC,MAAbA,EAC7BO,EAAwB,MAAbP,GAAiC,MAAbA,EAC/Bb,EAAYS,GAAQV,EACpBsB,EAAUT,GAAWlB,EAEzBC,EAAOqB,KAAK,CACVL,KAAMA,GAAQf,IACd0B,OAAQb,EACRT,UAAWA,EACXoB,SAAUA,EACVD,OAAQA,EACRF,QAASA,EACTI,QAASA,GAqHO3B,EArHe2B,EAsH5B3B,EAAM6B,QAAQ,eAAgB,SAtHS,KAAOC,EAAaxB,GAAa,gBAK3EF,GAAQD,EAAQb,EAAIwB,SACtBb,EAAOqB,KAAKlB,EAAOd,EAAIyC,OAAO5B,IAGzBF,EAiBT,SAAST,EAAkBS,WAErB+B,EAAU,IAAIC,MAAMhC,EAAOa,QAGtBoB,EAAI,EAAGA,EAAIjC,EAAOa,OAAQoB,IACR,iBAAdjC,EAAOiC,KAChBF,EAAQE,GAAK,IAAIrC,OAAO,OAASI,EAAOiC,GAAGP,QAAU,cAIlD,SAAUQ,EAAM5C,WACjBa,EAAO,GACPgC,EAAU7C,GAAWA,EAAQ6C,QAAWC,mBAEnCH,EAAI,EAAGA,EAAIjC,EAAOa,OAAQoB,IAAK,KAClCI,EAAQrC,EAAOiC,MAEE,iBAAVI,OAMPC,EADAC,EAAQL,EAAOA,EAAKG,EAAMrB,WAAQO,KAGlCS,MAAMQ,QAAQD,QACXF,EAAMb,aACH,IAAIiB,UAAU,aAAeJ,EAAMrB,KAAO,qCAG7B,IAAjBuB,EAAM1B,OAAc,IAClBwB,EAAMZ,SAAU,eAEd,IAAIgB,UAAU,aAAeJ,EAAMrB,KAAO,yBAG7C,IAAI0B,EAAI,EAAGA,EAAIH,EAAM1B,OAAQ6B,IAAK,IACrCJ,EAAUH,EAAOI,EAAMG,GAAIL,IAEtBN,EAAQE,GAAGU,KAAKL,SACb,IAAIG,UAAU,iBAAmBJ,EAAMrB,KAAO,eAAiBqB,EAAMX,QAAU,KAGvFvB,IAAe,IAANuC,EAAUL,EAAMV,OAASU,EAAMhC,WAAaiC,WAMpC,iBAAVC,GAAuC,iBAAVA,GAAuC,kBAAVA,OAWjEF,EAAMZ,eAOJ,IAAIgB,UAAU,aAAeJ,EAAMrB,KAAO,YAAcqB,EAAMb,OAAS,WAAa,aALpFa,EAAMf,UAASnB,GAAQkC,EAAMV,gBAZjCW,EAAUH,EAAOS,OAAOL,GAAQF,IAE3BN,EAAQE,GAAGU,KAAKL,SACb,IAAIG,UAAU,aAAeJ,EAAMrB,KAAO,eAAiBqB,EAAMX,QAAU,eAAiBY,EAAU,KAG9GnC,GAAQkC,EAAMV,OAASW,QAtCvBnC,GAAQkC,SAoDLlC,GAUX,SAAS0B,EAAcxC,UACdA,EAAIuC,QAAQ,4BAA6B,QAmBlD,SAASiB,EAAOvD,UACPA,GAAWA,EAAQwD,UAAY,GAAK,IAuE7C,SAAStD,EAAgBQ,EAAQ+C,EAAMzD,WAGjC0D,GAFJ1D,EAAUA,GAAW,IAEA0D,OACjBC,GAA0B,IAAlB3D,EAAQ2D,MAChBC,GAAsB,IAAhB5D,EAAQ4D,IACd7C,EAAYwB,EAAavC,EAAQe,WAAaZ,GAC9Ca,EAAahB,EAAQgB,YAAcZ,EACnCyD,EAAW,GAAGC,OAAO9D,EAAQ6D,UAAY,IAAIE,IAAIxB,GAAcuB,OAAO,KAAKvD,KAAK,KAChFyD,EAAQL,EAAQ,IAAM,GACtBM,EAAmC,IAAlBvD,EAAOa,OAGnBoB,EAAI,EAAGA,EAAIjC,EAAOa,OAAQoB,IAAK,KAClCI,EAAQrC,EAAOiC,MAEE,iBAAVI,EACTiB,GAASzB,EAAaQ,GACtBkB,EAAiBtB,IAAMjC,EAAOa,OAAS,IAAoD,EAA/CP,EAAWc,QAAQiB,EAAMA,EAAMxB,OAAS,QAC/E,KACDI,EAAUoB,EAAMb,OAChB,MAAQa,EAAMX,QAAU,OAASG,EAAaQ,EAAMhC,WAAa,MAAQgC,EAAMX,QAAU,MACzFW,EAAMX,QAENqB,GAAMA,EAAK1B,KAAKgB,GAEhBA,EAAMZ,SACJY,EAAMf,QACRgC,GAASzB,EAAaQ,EAAMV,QAAU,IAAMV,EAAU,KAEtDqC,GAAS,MAAQzB,EAAaQ,EAAMV,QAAU,IAAMV,EAAU,MAGhEqC,GAASzB,EAAaQ,EAAMV,QAAU,IAAMV,EAAU,YAKxDiC,GACGF,IAAQM,GAAS,MAAQjD,EAAY,MAE1CiD,GAAsB,MAAbH,EAAmB,IAAM,MAAQA,EAAW,MAEhDH,IAAQM,GAAS,MAAQjD,EAAY,MAAQ8C,EAAW,OACxDI,IAAgBD,GAAS,MAAQjD,EAAY,IAAM8C,EAAW,MAG9D,IAAIvD,OAAO0D,EAAOT,EAAMvD,IAejC,SAASH,EAAcgB,EAAM4C,EAAMzD,UAC7Ba,aAAgBP,OA5HtB,SAAyBO,EAAM4C,OACxBA,EAAM,OAAO5C,MAGdqD,EAASrD,EAAKsD,OAAOC,MAAM,gBAE3BF,MACG,IAAIvB,EAAI,EAAGA,EAAIuB,EAAO3C,OAAQoB,IACjCc,EAAK1B,KAAK,CACRL,KAAMiB,EACNN,OAAQ,KACRtB,UAAW,KACXoB,UAAU,EACVD,QAAQ,EACRF,SAAS,EACTI,QAAS,cAKRvB,EAyGEwD,CAAexD,EAAM4C,GAG1Bf,MAAMQ,QAAQrC,GAjGpB,SAAwBA,EAAM4C,EAAMzD,WAC9BsE,EAAQ,GAEH3B,EAAI,EAAGA,EAAI9B,EAAKU,OAAQoB,IAC/B2B,EAAMvC,KAAKlC,EAAagB,EAAK8B,GAAIc,EAAMzD,GAASmE,eAG3C,IAAI7D,OAAO,MAAQgE,EAAM/D,KAAK,KAAO,IAAKgD,EAAMvD,IA2F9CuE,CAAqC1D,EAAO4C,EAAMzD,IAhF9ByD,EAmFuBA,EAlF7CvD,EAAeJ,EAkFuBe,EAnFVb,EAmFuBA,GAlFdyD,EAAMzD,IADpD,IAA+ByD,EAAMzD,oECnR7BwE,EAAmBC,OAAOC,UAA1BF,eACFG,EAAQ,IAAIC,IAElB,SAASC,EAAYC,cAEVC,mBAAmBD,GAC1B,MAAOE,UACAF,GCPX,SAASG,EAAWjB,EAAOkB,EAASC,EAAUC,EAAYC,OACpDjB,EACAkB,EACAC,EAAa,QAEV,CACL9D,cAAK+D,MACCxB,IAAUwB,QACL,CAAEC,MAAM,OAGZrB,IACHA,EDDR,SAAmBJ,EAAOmB,EAAUC,EAAYC,OACxCzB,GAAOI,EAAM0B,SACbC,GAAc3B,EAAMnD,MAAQ,QAAM+C,EACpCgC,EAASjB,EAAMkB,IAAIF,OAElBC,EAAQ,KACLnC,EAAO,GACbmC,EAAS,CACPnC,KAAAA,EACArB,QAASvC,EAAamE,EAAMnD,MAAQ,GAAI4C,EAAM,CAAEG,IAAAA,KAElDe,EAAMmB,IAAIH,EAAUC,OAGhBzE,EAAIyE,EAAOxD,QAAQlB,KAAKiE,OACzBhE,SACI,aAGHN,EAAOM,EAAE,GACT4E,mBAAcV,GAEX1C,EAAI,EAAGA,EAAIxB,EAAEI,OAAQoB,IAAK,KAC3BhC,EAAMiF,EAAOnC,KAAKd,EAAI,GACtBqD,EAAOrF,EAAIe,KACXuB,EAAQ9B,EAAEwB,QACFV,IAAVgB,GAAwBuB,EAAeyB,KAAKF,EAAQC,KAClDrF,EAAIuB,OACN6D,EAAOC,GAAQ/C,EAAQA,EAAMiD,MAAMvF,EAAII,WAAWgD,IAAIc,GAAe,GAErEkB,EAAOC,GAAQ/C,EAAQ4B,EAAY5B,GAASA,SAK3C,CACLpC,KAAO+C,GAAwC,MAAjC/C,EAAKsF,OAAOtF,EAAKU,OAAS,GAA8BV,EAAjBA,EAAK2B,OAAO,GACjEiB,KAAM2B,EAAWtB,OAAO8B,EAAOnC,MAC/BsC,OAAAA,GCrCYK,CAAUpC,EAAOmB,EAAUC,EAAYC,UAGtC,CACLI,MAAM,EACNxC,MAAO,CACLe,MAAAA,EACAkB,QAAAA,EACArE,KAAMuD,EAAMvD,KACZ4C,KAAMW,EAAMX,KACZsC,OAAQ3B,EAAM2B,YAMlB3B,GAASJ,EAAM0B,cACVH,EAAavB,EAAM0B,SAASnE,QAAQ,KACpC+D,EAAc,KACXe,EAAarC,EAAM0B,SAASH,GAClCc,EAAWC,OAAStC,EAEpBsB,EAAeL,EACboB,EACAnB,EAAUd,EAAMvD,KAChBsE,EAAS3C,OAAO4B,EAAMvD,KAAKU,QAC3B6C,EAAMX,KACNW,EAAM2B,YAIJQ,EAAajB,EAAa7D,KAAK+D,OAChCe,EAAWd,WACP,CACLA,MAAM,EACNxC,MAAOsD,EAAWtD,OAItBqC,EAAe,KACfC,UAIG,CAAEE,MAAM,KCvDrB,SAASe,EAAaC,EAASV,MACO,mBAAzBU,EAAQzC,MAAM0C,cAChBD,EAAQzC,MAAM0C,OAAOD,EAASV,OAgBnCY,wBACQC,EAAQ5G,eAAAA,IAAAA,EAAU,KACvB4G,GAA4B,iBAAXA,QACd,IAAIzD,UAAU,uBAGjB+B,QAAUlF,EAAQkF,SAAW,QAC7B2B,aAAe7G,EAAQ6G,kBACvBL,aAAexG,EAAQwG,cAAgBA,OACvCC,uBAAYK,OAAQC,MAAS/G,EAAQyG,cACrCO,KAAOtE,MAAMQ,QAAQ0D,GAAU,CAAE/F,KAAM,GAAI6E,SAAUkB,EAAQN,OAAQ,MAASM,OAC9EI,KAAKV,OAAS,wBAGrBW,QAAA,SAAQC,cACAT,mBACDM,KAAKN,QACyB,iBAAtBS,EACP,CAAE/B,SAAU+B,GACZA,GAEA9C,EAAQa,EACZ8B,KAAKC,KACLD,KAAK7B,QACLuB,EAAQtB,SAAS3C,OAAOuE,KAAK7B,QAAQ3D,QACrC,GACA,MAEI0F,EAAUF,KAAKP,aACjB/D,EAAU,KACV0E,EAAc,KACdC,EAAiBX,WAEZhF,EAAK4F,EAAQf,EAA8BgB,YAA9BhB,IAAAA,EAAS7D,EAAQQ,MAAMe,WACrCwB,EAA6B,OAAf8B,GAAuB7E,EAAQQ,MAAMe,SACzDvB,EAAU0E,GAAe/C,EAAM3C,KAAK+D,GACpC2B,EAAc,MAETE,IACC5E,EAAQgD,OAlDpB,SAAsB8B,EAAalB,WAC7BrC,EAAQqC,EACLrC,OACLA,EAAQA,EAAMsC,UACAiB,SACL,SAGJ,EA0CoBC,CAAalB,EAAQ7D,EAAQQ,MAAMe,eACtDmD,EAAc1E,EACPgF,QAAQR,QAAQ,SAIvBxE,EAAQgD,KAAM,KACViC,EAAQ,IAAIC,MAAM,0BACxBD,EAAME,OAAS,IACRH,QAAQI,OAAOH,UAGxBN,mBAAsBX,EAAYhE,EAAQQ,OAEnCwE,QAAQR,QAAQA,EAAQG,EAAgB3E,EAAQQ,MAAM8C,SAAS+B,KAAK,SAACC,UACtEA,MAAAA,EACKA,EAEFtG,EAAK4F,EAAQf,EAAQyB,YAIhCtB,EAAQhF,KAAOA,EAERgG,QAAQR,UACZa,KAAK,kBAAMrG,GAAK,EAAMuG,EAAKhB,QAC3BiB,MAAM,SAACP,MACFM,EAAKnB,oBACAmB,EAAKnB,aAAaa,EAAON,SAE5BM,iBAKdf,EAAgB9G,aAAeA"}