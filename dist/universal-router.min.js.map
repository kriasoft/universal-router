{"version":3,"file":"universal-router.min.js","sources":["../node_modules/path-to-regexp/index.js","src/matchPath.js","src/matchRoute.js","src/resolveRoute.js","src/UniversalRouter.js","src/isChildRoute.js"],"sourcesContent":["/**\n * Expose `pathToRegexp`.\n */\nmodule.exports = pathToRegexp\nmodule.exports.parse = parse\nmodule.exports.compile = compile\nmodule.exports.tokensToFunction = tokensToFunction\nmodule.exports.tokensToRegExp = tokensToRegExp\n\n/**\n * Default configs.\n */\nvar DEFAULT_DELIMITER = '/'\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \":test(\\\\d+)?\" => [\"test\", \"\\d+\", undefined, \"?\"]\n  // \"(\\\\d+)\"  => [undefined, undefined, \"\\d+\", undefined]\n  '(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?'\n].join('|'), 'g')\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = []\n  var key = 0\n  var index = 0\n  var path = ''\n  var defaultDelimiter = (options && options.delimiter) || DEFAULT_DELIMITER\n  var whitelist = (options && options.whitelist) || undefined\n  var pathEscaped = false\n  var res\n\n  while ((res = PATH_REGEXP.exec(str)) !== null) {\n    var m = res[0]\n    var escaped = res[1]\n    var offset = res.index\n    path += str.slice(index, offset)\n    index = offset + m.length\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1]\n      pathEscaped = true\n      continue\n    }\n\n    var prev = ''\n    var name = res[2]\n    var capture = res[3]\n    var group = res[4]\n    var modifier = res[5]\n\n    if (!pathEscaped && path.length) {\n      var k = path.length - 1\n      var c = path[k]\n      var matches = whitelist ? whitelist.indexOf(c) > -1 : true\n\n      if (matches) {\n        prev = c\n        path = path.slice(0, k)\n      }\n    }\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path)\n      path = ''\n      pathEscaped = false\n    }\n\n    var repeat = modifier === '+' || modifier === '*'\n    var optional = modifier === '?' || modifier === '*'\n    var pattern = capture || group\n    var delimiter = prev || defaultDelimiter\n\n    tokens.push({\n      name: name || key++,\n      prefix: prev,\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      pattern: pattern\n        ? escapeGroup(pattern)\n        : '[^' + escapeString(delimiter === defaultDelimiter ? delimiter : (delimiter + defaultDelimiter)) + ']+?'\n    })\n  }\n\n  // Push any remaining characters.\n  if (path || index < str.length) {\n    tokens.push(path + str.substr(index))\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options), options)\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens, options) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length)\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$', flags(options))\n    }\n  }\n\n  return function (data, options) {\n    var path = ''\n    var encode = (options && options.encode) || encodeURIComponent\n    var validate = options ? options.validate !== false : true\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i]\n\n      if (typeof token === 'string') {\n        path += token\n        continue\n      }\n\n      var value = data ? data[token.name] : undefined\n      var segment\n\n      if (Array.isArray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but got array')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) continue\n\n          throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j], token)\n\n          if (validate && !matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\"')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment\n        }\n\n        continue\n      }\n\n      if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n        segment = encode(String(value), token)\n\n        if (validate && !matches[i].test(segment)) {\n          throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but got \"' + segment + '\"')\n        }\n\n        path += token.prefix + segment\n        continue\n      }\n\n      if (token.optional) continue\n\n      throw new TypeError('Expected \"' + token.name + '\" to be ' + (token.repeat ? 'an array' : 'a string'))\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$/()])/g, '\\\\$1')\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options && options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {Array=}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  if (!keys) return path\n\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g)\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        pattern: null\n      })\n    }\n  }\n\n  return path\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = []\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source)\n  }\n\n  return new RegExp('(?:' + parts.join('|') + ')', flags(options))\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}  tokens\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  options = options || {}\n\n  var strict = options.strict\n  var start = options.start !== false\n  var end = options.end !== false\n  var delimiter = options.delimiter || DEFAULT_DELIMITER\n  var endsWith = [].concat(options.endsWith || []).map(escapeString).concat('$').join('|')\n  var route = start ? '^' : ''\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n\n    if (typeof token === 'string') {\n      route += escapeString(token)\n    } else {\n      var capture = token.repeat\n        ? '(?:' + token.pattern + ')(?:' + escapeString(token.delimiter) + '(?:' + token.pattern + '))*'\n        : token.pattern\n\n      if (keys) keys.push(token)\n\n      if (token.optional) {\n        if (!token.prefix) {\n          route += '(' + capture + ')?'\n        } else {\n          route += '(?:' + escapeString(token.prefix) + '(' + capture + '))?'\n        }\n      } else {\n        route += escapeString(token.prefix) + '(' + capture + ')'\n      }\n    }\n  }\n\n  if (end) {\n    if (!strict) route += '(?:' + escapeString(delimiter) + ')?'\n\n    route += endsWith === '$' ? '$' : '(?=' + endsWith + ')'\n  } else {\n    var endToken = tokens[tokens.length - 1]\n    var isEndDelimited = typeof endToken === 'string'\n      ? endToken[endToken.length - 1] === delimiter\n      : endToken === undefined\n\n    if (!strict) route += '(?:' + escapeString(delimiter) + '(?=' + endsWith + '))?'\n    if (!isEndDelimited) route += '(?=' + escapeString(delimiter) + '|' + endsWith + ')'\n  }\n\n  return new RegExp(route, flags(options))\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {Array=}                keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, keys)\n  }\n\n  if (Array.isArray(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), keys, options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), keys, options)\n}\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright (c) 2015-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport pathToRegexp from 'path-to-regexp'\n\nconst { hasOwnProperty } = Object.prototype\nconst cache = new Map()\n\nfunction decodeParam(val) {\n  try {\n    return decodeURIComponent(val)\n  } catch (err) {\n    return val\n  }\n}\n\nfunction matchPath(route, pathname, parentKeys, parentParams) {\n  const end = !route.children\n  const cacheKey = `${route.path || ''}|${end}`\n  let regexp = cache.get(cacheKey)\n\n  if (!regexp) {\n    const keys = []\n    regexp = {\n      keys,\n      pattern: pathToRegexp(route.path || '', keys, { end }),\n    }\n    cache.set(cacheKey, regexp)\n  }\n\n  const m = regexp.pattern.exec(pathname)\n  if (!m) {\n    return null\n  }\n\n  const path = m[0]\n  const params = { ...parentParams }\n\n  for (let i = 1; i < m.length; i++) {\n    const key = regexp.keys[i - 1]\n    const prop = key.name\n    const value = m[i]\n    if (value !== undefined || !hasOwnProperty.call(params, prop)) {\n      if (key.repeat) {\n        params[prop] = value ? value.split(key.delimiter).map(decodeParam) : []\n      } else {\n        params[prop] = value ? decodeParam(value) : value\n      }\n    }\n  }\n\n  return {\n    path: !end && path.charAt(path.length - 1) === '/' ? path.substr(1) : path,\n    keys: parentKeys.concat(regexp.keys),\n    params,\n  }\n}\n\nexport default matchPath\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright (c) 2015-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport matchPath from './matchPath'\n\nfunction matchRoute(route, baseUrl, pathname, parentKeys, parentParams) {\n  let match\n  let childMatches\n  let childIndex = 0\n\n  return {\n    next(routeToSkip) {\n      if (route === routeToSkip) {\n        return { done: true }\n      }\n\n      if (!match) {\n        match = matchPath(route, pathname, parentKeys, parentParams)\n\n        if (match) {\n          return {\n            done: false,\n            value: {\n              route,\n              baseUrl,\n              path: match.path,\n              keys: match.keys,\n              params: match.params,\n            },\n          }\n        }\n      }\n\n      if (match && route.children) {\n        while (childIndex < route.children.length) {\n          if (!childMatches) {\n            const childRoute = route.children[childIndex]\n            childRoute.parent = route\n\n            childMatches = matchRoute(\n              childRoute,\n              baseUrl + match.path,\n              pathname.substr(match.path.length),\n              match.keys,\n              match.params,\n            )\n          }\n\n          const childMatch = childMatches.next(routeToSkip)\n          if (!childMatch.done) {\n            return {\n              done: false,\n              value: childMatch.value,\n            }\n          }\n\n          childMatches = null\n          childIndex++\n        }\n      }\n\n      return { done: true }\n    },\n  }\n}\n\nexport default matchRoute\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright (c) 2015-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nfunction resolveRoute(context, params) {\n  if (typeof context.route.action === 'function') {\n    return context.route.action(context, params)\n  }\n  return undefined\n}\n\nexport default resolveRoute\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright (c) 2015-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport pathToRegexp from 'path-to-regexp'\nimport matchRoute from './matchRoute'\nimport resolveRoute from './resolveRoute'\nimport isChildRoute from './isChildRoute'\n\nclass UniversalRouter {\n  constructor(routes, options = {}) {\n    if (!routes || typeof routes !== 'object') {\n      throw new TypeError('Invalid routes')\n    }\n\n    this.baseUrl = options.baseUrl || ''\n    this.errorHandler = options.errorHandler\n    this.resolveRoute = options.resolveRoute || resolveRoute\n    this.context = { router: this, ...options.context }\n    this.root = Array.isArray(routes) ? { path: '', children: routes, parent: null } : routes\n    this.root.parent = null\n  }\n\n  resolve(pathnameOrContext) {\n    const context = {\n      ...this.context,\n      ...(typeof pathnameOrContext === 'string'\n        ? { pathname: pathnameOrContext }\n        : pathnameOrContext),\n    }\n    const match = matchRoute(\n      this.root,\n      this.baseUrl,\n      context.pathname.substr(this.baseUrl.length),\n      [],\n      null,\n    )\n    const resolve = this.resolveRoute\n    let matches = null\n    let nextMatches = null\n    let currentContext = context\n\n    function next(resume, parent = matches.value.route, prevResult) {\n      const routeToSkip = prevResult === null && !matches.done && matches.value.route\n      matches = nextMatches || match.next(routeToSkip)\n      nextMatches = null\n\n      if (!resume) {\n        if (matches.done || !isChildRoute(parent, matches.value.route)) {\n          nextMatches = matches\n          return Promise.resolve(null)\n        }\n      }\n\n      if (matches.done) {\n        const error = new Error('Route not found')\n        error.status = 404\n        return Promise.reject(error)\n      }\n\n      currentContext = { ...context, ...matches.value }\n\n      return Promise.resolve(resolve(currentContext, matches.value.params)).then((result) => {\n        if (result !== null && result !== undefined) {\n          return result\n        }\n        return next(resume, parent, result)\n      })\n    }\n\n    context.next = next\n\n    return Promise.resolve()\n      .then(() => next(true, this.root))\n      .catch((error) => {\n        if (this.errorHandler) {\n          return this.errorHandler(error, currentContext)\n        }\n        throw error\n      })\n  }\n}\n\nUniversalRouter.pathToRegexp = pathToRegexp\n\nexport default UniversalRouter\n","/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright (c) 2015-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nfunction isChildRoute(parentRoute, childRoute) {\n  let route = childRoute\n  while (route) {\n    route = route.parent\n    if (route === parentRoute) {\n      return true\n    }\n  }\n  return false\n}\n\nexport default isChildRoute\n"],"names":["str","options","tokensToFunction","parse","pathToRegexp","tokensToRegExp","DEFAULT_DELIMITER","PATH_REGEXP","RegExp","join","res","group","tokens","key","index","path","defaultDelimiter","delimiter","whitelist","undefined","pathEscaped","exec","m","escaped","offset","slice","length","prev","name","capture","modifier","k","c","indexOf","push","repeat","optional","pattern","prefix","replace","escapeString","substr","matches","Array","i","flags","data","encode","encodeURIComponent","validate","token","segment","value","isArray","TypeError","j","test","String","sensitive","keys","strict","start","end","endsWith","concat","map","route","endToken","isEndDelimited","groups","source","match","regexpToRegexp","parts","arrayToRegexp","stringToRegexp","hasOwnProperty","Object","prototype","cache","Map","decodeParam","val","decodeURIComponent","err","matchRoute","baseUrl","pathname","parentKeys","parentParams","childMatches","childIndex","next","routeToSkip","done","children","cacheKey","regexp","get","set","params","prop","call","split","charAt","matchPath","childRoute","parent","childMatch","resolveRoute","context","action","UniversalRouter","resolve","pathnameOrContext","this","root","nextMatches","currentContext","resume","prevResult","parentRoute","isChildRoute","Promise","error","Error","status","reject","then","result","_this","errorHandler","routes","router"],"mappings":"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"}